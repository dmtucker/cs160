1. Given a ray R defined by a starting point p = [0, 0, 1] and a direction d = [1, 1, 0]:

a) Does this ray intersect a sphere with radius 5 centered at [10, 10, 0]? If so, does it intersect the top or the bottom half?


b) If the sphere is made of a perfectly reflective material with an infinite green plane below it and infinite light blue plane above it, assuming no lighting or other considerations, what color will the pixel corresponding to the ray R be (approximately)?


c) How many recursive calls to a hypothetical trace_ray function would it take to compute this color (including the initial call with R as an argument)? Assume that this trace_ray function traces a ray until it hits an object and then either returns a color or recurses exactly once.



2. For each of the following situations, indicate whether a hypothetical rendering solution using shaders would require just a vertex shader, both a vertex and a fragment shader, or just a fragment shader:

a) A shader that brightens the entire screen when the camera is pointed at a light source.


b) A shader that bobs the point of view as the camera moves.


c) A shader that slightly displaces texture coordinates to make a texture look as if it is shaking.


d) A shader for an underwater effect that reduces the field of view, distorts the whole scene slightly to create a ripple effect, and renders colors as bluer than usual.



3. Your friend wants to write a fragment shader that will produce a blurring effect for an arbitrary scene. He get stuck and asks you for help, and you tell him that he'll need to do multipass rendering and pass a copy of the scene into the fragment shader to be able to do a blur. Your friend says that that seems difficult, and wonders if he can just use a vertex shader as well as a fragment shader to get a blur effect without multipass rendering. Can a vertex shader be used along with a fragment shader to produce a blur effect without multipass rendering?



4. Draw a top-down diagram of a 2-D scene that requires depth-4 recursion for rays projected from the camera location in order to be drawn correctly. In the scene, indicate the camera position, the position of one or more lights, and the material properties of objects as necessary. Draw the shapes of objects in the scene, and draw a set of 4 connected rays starting from the camera representing the ray-tracing path for a pixel in the scene that requires depth-4 recursion to find the right color. Your scene should include more than one reason for casting a recursive ray (e.g. reflection, refraction, lighting).



5. In order to render soft shadow edges in a ray-tracer, which of the following techniques are required?

   I. Casting multiple rays from each illuminated point to compute partial light intensity.
  II. Shadow blurring using a fragment shader.
 III. Ray-tracing from the light-source rather than from the camera.
  IV. Offline light-mapping to determine static illumination for the scene.
   V. Casting shadow-rays from dark areas of the scene to reduce overall illumination.



6. Name a technique or visual element of a scene that can be easily implemented using shaders (either vertex, fragment, both, or even tessellation or geometry shaders). Include a link to an example video or image that shows the result of the technique (or shows an image using that element). This technique or visual element should be difficult to reproduce using standard fixed-functionality OpenGL code (explain why in 1 or 2 sentences).
